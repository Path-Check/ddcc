map "http://who-int.github.io/svc/StructureMap/ddcc-to-coredataset" = "ddcc-to-coredataset"

uses "https://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCComposition" alias DDCC as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as source
uses "http://worldhealthorganization.github.io/ddcc/DDCCCoreDataSetPoV" alias DDCCCoreDataSetPoV as target


group Decode_DDCC_to_QR (
	source ddcc: Bundle,
	target qr : DDCCCoreDataSetPoV
	){

	ddcc.entry as entry then {
 	     entry.resource : Patient as patient
	     then  Decode_Patient_To_QR(patient,qr) "Patient";
	};



	ddcc.entry as entry then {
 	     entry.resource : Immunization as immunization
	     then  Decode_Immunization_To_QR(immunization,qr) "Immunization";
	};

}

group Decode_Patient_To_QR(
      source patient: Patient,
      target qr  : DDCCCoreDataSetPoV
      ) {
      	patient.birthDate as birthDate ->  qr.birthDate = birthDate;
	
	patient.name as name then {
		name.text as text -> qr.name = text;
	};
	     		  
}


group Decode_Immunization_To_QR(
      source immunization: Immunization,
      target qr : DDCCCoreDataSetPoV
      ) {
        immunization ->
	   qr.vaccination = create('BackboneElement') as vaccination then {	   
	   	immunization.protocolApplied as protocol then {
			     protocol.doseNumberPositiveInt as dose -> vaccination.dose = dose;
			             };

                immunization.occurrenceDateTime as date -> vaccination.date = date;



		immunization.extension as country
		     where (url = 'https://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCCountryOfVaccination')
		     then {
		         country.valueCode as code ->
			       vaccination.country =  create('Coding') as coding,
			       coding.code = code,
			       coding.system = 'http://hl7.org/fhir/ValueSet/iso3166-1-3';			       
			 
		     } "Country";

		immunization.extension as brand
		     where ( url = 'https://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCVaccineBrand')
		     then {		     
		     	 brand.valueCoding as valueCoding ->
		    	    vaccination.brand = valueCoding;
		     } "Vaccine Brand";
		     
		immunization.vaccineCode as vaccineCode then {
			     vaccineCode.coding as coding -> vaccination.vaccine = coding;
		    } "Vaccine Code";

	} "Vaccination";

};

